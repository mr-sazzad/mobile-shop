// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Define the Prisma client provider
generator client {
  provider = "prisma-client-js"
}

// Define the database connection configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User model with various fields and relationships
model User {
  id         String     @id @default(uuid())
  name       String
  image      String?
  coverImage String?
  address    String?
  age        String?
  bio        String?
  email      String     @unique
  password   String
  role       Role       @default(user)
  isBanned   Boolean    @default(false)
  gender     Gender     @default(Male)
  phone      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Cart       Cart[]
  Review     Review[]
  Wishlist   Wishlist[]
  Payment    Payment[]
}

// Define the Mobile model for mobile devices
model Mobile {
  id          String     @id @default(uuid())
  imgae       String
  model       String
  brand       String
  price       Int
  description String
  features    String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Cart        Cart[]
  Review      Review[]
  Wishlist    Wishlist[]
  Payment     Payment[]
}

// Define the Cart model representing user's shopping cart
model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  buyer     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Mobile   @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Wishlist model representing user's wishlist
model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Mobile   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Payment model representing user's payment transactions
model Payment {
  id        String        @id @default(uuid())
  status    PaymentStatus @default(Unpaid)
  userId    String
  buyer     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Mobile        @relation(fields: [productId], references: [id], onDelete: Cascade)
  session   String
  cartId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Define the Review model representing user's product reviews
model Review {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  userId    String
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Mobile   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum representing possible gender options
enum Gender {
  Male
  Female
  Other
}

// Enum representing possible user options
enum Role {
  user
  seller
  super_admin
}

// Enum representing possible payment status options
enum PaymentStatus {
  Unpaid
  Paid
}
